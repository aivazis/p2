// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2020 all rights reserved

// code guard
#if !defined(pyre_journal_Error_icc)
#error this file contains implementation details for pyre::journal::Error
#else


// metamethods
pyre::journal::Error::
Error(name_type name, verbosity_type verbosity) :
    diagnostic_type(verbosity),
    channel_type(name)
{
    // decorate with my severity
    setattr("severity", "error");
    // and my channel name
    setattr("channel", name);
}


// interface
// accessors
auto
pyre::journal::Error::
fatal() -> state_type
{
    // easy enough
    return inventory().fatal();
}


// mutators
auto
pyre::journal::Error::
fatal(state_type flag) -> state_type
{
    // easy enough
    return inventory().fatal(flag);
}


void
pyre::journal::Error::
commit()
{
    // if i'm an active channel, generate some output
    if (state()) {
        // hunt down the device to use
        auto dev = device();
        // record the entry
        dev->alert(verbosity(), page(), metadata());
    }

    // if i'm fatal
    if (fatal()) {
        // prepare a message
        string_type msg = name() + string_type(": application error");
        // throw an application error
        throw application_error(msg);
    }

    // all done
    return;
}


#endif

// end of file
