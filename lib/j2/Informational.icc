// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2020 all rights reserved

// code guard
#if !defined(pyre_journal_Informational_icc)
#error this file contains implementation details for pyre::journal::Informational
#else


// metamethods
pyre::journal::Informational::
Informational(const name_type & name, verbosity_type verbosity) :
    channel_type(name, verbosity)
{
    // get my entry
    entry_type & e = entry();
    // decorate with my severity
    e.note("severity", "info");
}


// implementation details
// record the message to the chosen device
void
pyre::journal::Informational::
record()
{
    // hunt down the device to use
    auto dev = device();
    // record the entry
    dev->alert(entry());
    // all done
    return;
}


void
pyre::journal::Informational::
die()
{
    // prepare a message
    auto msg = name() + ": application error";
    // throw an application error
    throw exception_type(msg);
}


// initialize the channel index
auto
pyre::journal::Informational::
initializeIndex() -> index_type
{
    // make an empty index; for {info}, channels are (active,non-fatal) by default
    index_type index(true, false);
    // and return it
    return index;
}


#endif

// end of file
