// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2020 all rights reserved

// code guard
#if !defined(pyre_journal_InventoryProxy_icc)
#error this file contains implementation details for pyre::journal::InventoryProxy
#else


// metamethods
template <typename clientT>
pyre::journal::InventoryProxy<clientT>::
InventoryProxy(inventory_reference inventory) :
    _inventory(inventory)
{}


// accessors
template <typename clientT>
auto
pyre::journal::InventoryProxy<clientT>::
active() const
{
    // ask my referent
    return _inventory.active();
}


template <typename clientT>
auto
pyre::journal::InventoryProxy<clientT>::
fatal() const
{
    // ask my referent
    return _inventory.fatal();
}


template <typename clientT>
auto
pyre::journal::InventoryProxy<clientT>::
device() const
{
    // ask my referent
    return _inventory.device();
}


// mutators
template <typename clientT>
auto
pyre::journal::InventoryProxy<clientT>::
active(active_type active) -> client_reference
{
    // delegate
    _inventory.active(active);
    // enable chaining
    return static_cast<client_reference>(*this);
}


template <typename clientT>
auto
pyre::journal::InventoryProxy<clientT>::
fatal(fatal_type fatal) -> client_reference
{
    // delegate
    _inventory.fatal(fatal);
    // enable chaining
    return static_cast<client_reference>(*this);
}


template <typename clientT>
auto
pyre::journal::InventoryProxy<clientT>::
device(device_type device) -> client_reference
{
    // delegate
    _inventory.device(device);
    // enable chaining
    return static_cast<client_reference>(*this);
}


// syntactic sugar
template <typename clientT>
pyre::journal::InventoryProxy<clientT>::
operator active_type() const
{
    // return my activation state
    return active();
}


#endif

// end of file
