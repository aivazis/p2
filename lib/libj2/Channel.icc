// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2020 all rights reserved

// code guard
#if !defined(pyre_journal_Channel_icc)
#error this file contains implementation details for pyre::journal::Channel
#else


// metamethods
// constructor
template <typename severityT, typename inventoryT>
pyre::journal::Channel<severityT, inventoryT>::
Channel(const name_type & name) :
    _name(name),
    _inventory(lookup(name))
{}


// syntactic sugar
template <typename severityT, typename inventoryT>
pyre::journal::Channel<severityT, inventoryT>::
operator bool() const
{
    // my inventory can convert itself
    return _inventory;
}


// interface
// accessors
template <typename severityT, typename inventoryT>
auto
pyre::journal::Channel<severityT, inventoryT>::
name() const -> const name_type &
{
    // easy enough
    return _name;
}


template <typename severityT, typename inventoryT>
auto
pyre::journal::Channel<severityT, inventoryT>::
state() const -> state_type
{
    // easy enough
    return _inventory.state();
}


template <typename severityT, typename inventoryT>
auto
pyre::journal::Channel<severityT, inventoryT>::
inventory() const -> inventory_type &
{
    // easy enough
    return _inventory;
}


// mutators
template <typename severityT, typename inventoryT>
void
pyre::journal::Channel<severityT, inventoryT>::
activate()
{
    // easy enough
    _inventory.activate();
    // all done
    return;
}


template <typename severityT, typename inventoryT>
void
pyre::journal::Channel<severityT, inventoryT>::
deactivate()
{
    // easy enough
    _inventory.deactivate();
    // all done
    return;
}


// static interface
template <typename severityT, typename inventoryT>
auto
pyre::journal::Channel<severityT, inventoryT>::
index() -> const index_type &
{
    // grant access to my index
    return _index;
}


template <typename severityT, typename inventoryT>
constexpr auto
pyre::journal::Channel<severityT, inventoryT>::
defaultState() -> state_type
{
    // easy enough
    return inventory_type::defaultState();
}


template <typename severityT, typename inventoryT>
auto
pyre::journal::Channel<severityT, inventoryT>::
lookup(const name_type & name) -> inventory_type &
{
    // easy enough
    return _index.lookup(name);
}


// static data
template <typename severityT, typename inventoryT>
typename pyre::journal::Channel<severityT, inventoryT>::index_type
pyre::journal::Channel<severityT, inventoryT>::_index;


#endif

// end of file
