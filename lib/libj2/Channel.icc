// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2020 all rights reserved

// code guard
#if !defined(pyre_journal_Channel_icc)
#error this file contains implementation details for pyre::journal::Channel
#else


// metamethods
// constructor
template <typename severityT>
pyre::journal::Channel<severityT>::
Channel(const string_t & name) :
    _name(name),
    _inventory(severity_t::lookup(name))
{}


// syntactic sugar
template <typename severityT>
pyre::journal::Channel<severityT>::
operator bool() const
{
    // my inventory can convert itself
    return _inventory;
}


// interface
// accessors
template <typename severityT>
auto
pyre::journal::Channel<severityT>::
name() const -> const string_t &
{
    // easy enough
    return _name;
}


template <typename severityT>
auto
pyre::journal::Channel<severityT>::
state() const -> state_t
{
    // easy enough
    return _inventory.state();
}


template <typename severityT>
auto
pyre::journal::Channel<severityT>::
device() const -> device_t *
{
    // easy enough
    return _inventory.device();
}


template <typename severityT>
constexpr auto
pyre::journal::Channel<severityT>::
defaultState() -> state_t
{
    // easy enough
    return inventory_t::defaultState();
}


// mutators
template <typename severityT>
void
pyre::journal::Channel<severityT>::
activate()
{
    // easy enough
    _inventory.activate();
    // all done
    return;
}


template <typename severityT>
void
pyre::journal::Channel<severityT>::
deactivate()
{
    // easy enough
    _inventory.deactivate();
    // all done
    return;
}


template <typename severityT>
auto
pyre::journal::Channel<severityT>::
device(device_t * device) -> device_t *
{
    // easy enough
    return _inventory.device(device);
}


#endif

// end of file
