// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2020 all rights reserved

// code guard
#if !defined(pyre_journal_Debug_icc)
#error this file contains implementation details for pyre::journal::Debug
#else


// metamethods
pyre::journal::Debug::
Debug(name_type name) :
    diagnostic_type(),
    channel_type(name)
{
    // decorate with my severity
    setattr("severity", "debug");
    // and my channel name
    setattr("channel", name);
}


// interface
void
pyre::journal::Debug::
commit()
{
    // if i'm not an active channel
    if (!state()) {
        // do nothing
        return;
    }

    // otherwise, hunt down the device to use
    auto dev = device();
    // record the entry
    dev->memo(verbosity(), page(), metadata());

    // all done
    return;
}


// initialize the channel index
auto
pyre::journal::Debug::
initializeIndex() -> index_type
{
    // make an empty index
    index_type index;
    // read the {JOURNAL_DEBUG} environment variable
    auto debugopt = std::getenv("JOURNAL_DEBUG");
    // if it doesn't exist
    if (debugopt == nullptr) {
        // return the empty index
        return index;
    }
    // otherwise, convert the value into a set of names
    auto channels = chronicler_t::nameset(debugopt);
    // go through them
    for (auto & name : channels) {
        // make an inventory
        inventory_type inventory(true);
        // add them to the index
        index.insert(name, inventory);
    }

    // and return it
    return index;
}


// bulk channel activation
void
pyre::journal::Debug::
activateChannels(const nameset_type & names)
{
    // go through the names in the set
    for (auto & name : names) {
        // make a debug channel by this name
        Debug channel(name);
        // and activate it
        channel.activate();
    }
    // all done
    return;
}


#endif

// end of file
