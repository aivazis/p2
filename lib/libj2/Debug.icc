// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2020 all rights reserved

// code guard
#if !defined(pyre_journal_Debug_icc)
#error this file contains implementation details for pyre::journal::Debug
#else


// metamethods
pyre::journal::Debug::
Debug(name_type name) :
    diagnostic_type(),
    channel_type(name)
{
    setattr("channel", name);
    setattr("severity", "debug");
}


// interface
void
pyre::journal::Debug::
commit()
{
    // if i'm not an active channel
    if (!state()) {
        // do nothing
        return;
    }

    // decorate with my severity
    setattr("severity", "debug");
    // and my channel name
    setattr("channel", name());

    // otherwise, hunt down the device to use; start with the device specific to this channel
    auto dev = inventory().device();
    // if that's not set
    if (!dev) {
        // try the default device for this severity
        dev = device();
        // if that's not set
        if (!dev) {
            // ask the {chronicler} for the global default
            dev = Chronicler::device();
            // finally, if that's not set
            if (!dev) {
                // use the trash can
                dev = std::make_shared<Trash>();
            }
        }
    }

    // record the entry
    dev->record(entry(), metadata());

    // all done
    return;
}


#endif

// end of file
