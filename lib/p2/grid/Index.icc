// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2020 all rights reserved

// code guard
#if !defined(pyre_grid_Index_icc)
#error this file contains implementation details for pyre::grid::Index
#else


// metamethods
template <pyre::grid::size_t N, bool checkBounds>
constexpr
pyre::grid::Index<N, checkBounds>::
Index(idx_type value) :
    _rep{}
{
    std::fill(begin(), end(), value);
}


template <pyre::grid::size_t N, bool checkBounds>
template <typename... argT>
constexpr
pyre::grid::Index<N, checkBounds>::
Index(argT... idx) :
    _rep{static_cast<idx_type>(idx)...}
{}


// access
template <pyre::grid::size_t N, bool checkBounds>
constexpr auto
pyre::grid::Index<N, checkBounds>::
operator [] (size_type axis) const -> idx_type
{
    // if the user has asked for bounds checking
    if (checkBounds && axis >= dim()) {
        // make a channel
        pyre::journal::firewall_t channel("pyre.gred.bounds");
        // complain
        channel
            << "out of bounds read only access:" << pyre::journal::newline
            << "  with {axis=" << axis
            << "}, must be less than {dim=" << dim() << "}" << pyre::journal::newline
            << "  in pyre::grid::index_t::operator[]"
            << pyre::journal::endl(__HERE__);
        // unreachable, unless the user has marked this error as non-fatal
        // clamp {axis} to the largest legal value
        axis = dim() - 1;
    }

    // easy enough
    return _rep[axis];
}


template <pyre::grid::size_t N, bool checkBounds>
constexpr auto
pyre::grid::Index<N, checkBounds>::
operator [] (size_type axis) -> idx_reference
{
    // if the user has asked for bounds checking
    if (checkBounds && axis >= dim()) {
        // make a channel
        pyre::journal::firewall_t channel("pyre.grid.bounds");
        // complain
        channel
            << "out of bounds read/write access:" << pyre::journal::newline
            << "  with {axis=" << axis
            << "}, must be less than {dim=" << dim() << "}" << pyre::journal::newline
            << "  in pyre::grid::index_t::operator[]"
            << pyre::journal::endl(__HERE__);
        // unreachable, unless the user has marked this error as non-fatal
        // clamp {axis} to the largest legal value
        axis = dim() - 1;
    }

    // easy enough
    return _rep[axis];
}


// iteration support
template <pyre::grid::size_t N, bool checkBounds>
constexpr auto
pyre::grid::Index<N, checkBounds>::
begin() const
{
    // ask my rep for its matching const_iterator
    return _rep.cbegin();
}


template <pyre::grid::size_t N, bool checkBounds>
constexpr auto
pyre::grid::Index<N, checkBounds>::
end() const
{
    // ask my rep for its matching const_iterator
    return _rep.cend();
}


template <pyre::grid::size_t N, bool checkBounds>
constexpr auto
pyre::grid::Index<N, checkBounds>::
begin()
{
    // ask my rep for its matching iterator
    return _rep.begin();
}


template <pyre::grid::size_t N, bool checkBounds>
constexpr auto
pyre::grid::Index<N, checkBounds>::
end()
{
    // ask my rep for its matching iterator
    return _rep.end();
}


// static interface
template <pyre::grid::size_t N, bool checkBounds>
constexpr auto
pyre::grid::Index<N, checkBounds>::
dim()
{
    // ask my rep
    return std::tuple_size<rep_type>::value;
}


#endif

// end of file
