// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2020 all rights reserved

// code guard
#if !defined(pyre_grid_Index_icc)
#error this file contains implementation details for pyre::grid::Index
#else


// metamethods
// constructor that fills an index with a specific value
template <class containerT>
constexpr
pyre::grid::Index<containerT>::
Index(rank_type value) :
    rep_type {}
{
    // fill my representation with {value}
    // std::fill(this->begin(), this->end(), value);
    // this would be the preferred way, but {std::fill} is not {constexpr} until {c++20}, so
    for (auto & axis : *this) {
        // set the value
        axis = value;
    }
}


// constructor that accepts an initializer list
template <class containerT>
template <typename... argT>
constexpr
pyre::grid::Index<containerT>::
Index(argT... idx) :
    rep_type(idx...)
{}


// static interface: factories
// make an index that is filled with zeroes
template <class containerT>
constexpr auto
pyre::grid::Index<containerT>::
zero() -> index_type
{
    // delegate
    return index_type(0);
}


// index algebra
template <class containerT>
constexpr auto
pyre::grid::
operator+ (const Index<containerT> & i1, const Index<containerT> & i2) -> Index<containerT>
{
    // make a default index
    Index<containerT> sum;

    // go through each axis
    for (size_t axis = 0; axis < sum.rank(); ++axis) {
        // do the math
        sum[axis] = i1[axis] + i2[axis];
    }

    // all done
    return sum;
}


template <class containerT>
constexpr auto
pyre::grid::
operator- (const Index<containerT> & i1, const Index<containerT> & i2) -> Index<containerT>
{
    // make a default index
    Index<containerT> diff;

    // go through each axis
    for (size_t axis = 0; axis < diff.rank(); ++axis) {
        // do the math
        diff[axis] = i1[axis] - i2[axis];
    }

    // all done
    return diff;
}


#endif

// end of file
