// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2020 all rights reserved

// code guard
#if !defined(pyre_grid_Order_icc)
#error this file contains implementation details for pyre::grid::Order
#else


// metamethods
template <pyre::grid::size_t N>
template <typename... argT>
constexpr
pyre::grid::Order<N>::
Order(argT... permutation) :
    product_type(permutation...)
{}


// static interface: factories
// row major: the right most index varies the fastest
template <pyre::grid::size_t N>
constexpr auto
pyre::grid::Order<N>::
rowMajor()
{
    // make an empty order
    order_type order;
    // get its size
    auto dim = order.dim();

    // go through slots
    for (size_t slot=0; slot < dim; ++slot) {
        // and fill with consecutive decreasing integers
        order[slot] = dim - 1 - slot;
    }

    // all done
    return order;
}


// alias for the above
template <pyre::grid::size_t N>
constexpr auto
pyre::grid::Order<N>::
c()
{
    // delegate
    return rowMajor();
}


// column major: the left most index varies the fastest
template <pyre::grid::size_t N>
constexpr auto
pyre::grid::Order<N>::
columnMajor()
{
    // make an empty order
    order_type order;
    // get its size
    auto dim = order.dim();

    // go through slots
    for (size_t slot=0; slot < dim; ++slot) {
        // and fill with consecutive decreasing integers
        order[slot] = slot;
    }

    // all done
    return order;
}


// alias for the above
template <pyre::grid::size_t N>
constexpr auto
pyre::grid::Order<N>::
fortran()
{
    // delegate
    return columnMajor();
}




#endif

// end of file
