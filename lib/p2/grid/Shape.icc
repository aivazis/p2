// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2020 all rights reserved

// code guard
#if !defined(pyre_grid_Shape_icc)
#error this file contains implementation details for pyre::grid::Shape
#else


// metamethods
// constructor that accepts an initializer list
template <pyre::grid::size_t N, template <typename, size_t> class containerT>
template <typename... argT>
constexpr
pyre::grid::Shape<N, containerT>::
Shape(argT... idx) :
    rep_type(idx...)
{}


// interface
// the total number of addressable values
template <pyre::grid::size_t N, template <typename, size_t> class containerT>
constexpr auto
pyre::grid::Shape<N, containerT>::
capacity() const -> size_type
{
    // the initial value
    size_t one = 1;
    // my capacity is equal to the product of the number of possible values along each axis
    return std::accumulate(this->begin(), this->end(), one, std::multiplies<rank_type>());
}


#endif

// end of file
