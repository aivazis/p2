// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2020 all rights reserved


// code guard
#if !defined(pyre_memory_ConstMap_icc)
#error this file contains implementation details for pyre::memory::ConstMap
#else


// map over an existing data product
template <typename cellT, bool checkBounds>
pyre::memory::ConstMap<cellT, checkBounds>::
ConstMap(uri_type uri) :
    FileMap(uri, false)
{}


// interface
// compute the number of cells in the memory block
template <typename cellT, bool checkBounds>
auto
pyre::memory::ConstMap<cellT, checkBounds>::
cells() const
{
    // convert using my size in bytes
    return bytes() / sizeof(cell_type);
}


// access to data pointer
template <typename cellT, bool checkBounds>
auto
pyre::memory::ConstMap<cellT, checkBounds>::
data() const
{
    // cast my data pointer to a {cellT *}
    return static_cast<pointer>(FileMap::data());
}


// iterator support
// iterator start
template <typename cellT, bool checkBounds>
auto
pyre::memory::ConstMap<cellT, checkBounds>::
begin() const -> const_pointer
{
    // return the beginning of the block
    return data();
}


// iterator end
template <typename cellT, bool checkBounds>
auto
pyre::memory::ConstMap<cellT, checkBounds>::
end() const -> const_pointer
{
    // return one past the end of the block
    return data() + cells();
}


// array-like access
template <typename cellT, bool checkBounds>
auto
pyre::memory::ConstMap<cellT, checkBounds>::
operator [] (size_type pos) const -> const_reference
{
    // check the arguments
    if (checkBounds && pos >= cells()) {
        // make a channel
        pyre::journal::firewall_t channel("pyre.memory.bounds");
        // complain
        channel
            << "out of bounds access:" << pyre::journal::newline
            << "  index " << pos << " must be less than " << cells() << pyre::journal::newline
            << "  in pyre::memory::constmap_t::operator[]" << pyre::journal::newline
            << "  with a const map over " << uri()
            << pyre::journal::endl(__HERE__);
        // unreachable, unless the user has marked this error as non-fatal
        // clamp {pos} to the last element in the block
        pos = cells() - 1;
    }

    // get the cell and return it
    return data()[pos];
}


#endif

// end of file
