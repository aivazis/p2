// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2020 all rights reserved

// code guard
#if !defined(pyre_timers_Movement_icc)
#error this file contains implementation details for pyre::timers::Movement
#else


// metamethods
pyre::timers::Movement::
Movement() :
    // all timers start out disabled
    _active {false},
    // with a default-initialized timestamp
    _mark {},
    // and a zero duration
    _duration { duration_type::zero() }
{}


// accessors
auto
pyre::timers::Movement::
active() const
{
    // easy enough
    return _active;
}


auto
pyre::timers::Movement::
mark() const
{
    // easy enough
    return _mark;
}


// interface
// buttons
auto
pyre::timers::Movement::
start()
{
    // starting a movement that it already active
    if (_active) {
        // is a no-op
        return _mark;
    }

    // otherwise, activate
    _active = true;
    // get a timestamp
    _mark = clock_type::now();

    // and return the timestamp, in case the caller cares
    return _mark;
}


auto
pyre::timers::Movement::
stop()
{
    // stopping an inactive movement
    if (!_active) {
        // is a no-op
        return _duration;
    }

    // otherwise, compute the time elapsed since the last {start}
    auto elapsed = clock_type::now() - _mark;
    // mark the movement as stopped
    _active = false;
    // update the elapsed time
    _duration += elapsed;
    // and return the adjustment
    return elapsed;
}


auto
pyre::timers::Movement::
reset() -> movement_reference
{
    // mark the movement as inactive
    _active = false;
    // zero out the duration
    _duration = duration_type::zero();
    //
    return *this;
}


// readout
auto
pyre::timers::Movement::
read() const
{
    // if the timer is not active
    if (!_active) {
        // return the accumulated time
        return _duration;
    }

    // otherwise, non-destructively compute the time since the last time the timer was started
    auto elapsed = clock_type::now() - _mark;
    // add the accumulated time and return it
    return _duration + elapsed;
}


// displays
auto
pyre::timers::Movement::
sec() const
{
    // read the timer
    auto duration = read();
    // convert the duration in seconds
    auto sec = std::chrono::duration_cast<seconds_type>(duration);

    // make a buffer
    buffer_type buffer;
    // render
    buffer << sec.count() << "s";

    // and return
    return buffer.str();
}


auto
pyre::timers::Movement::
ms() const
{
    // read the timer
    auto duration = read();
    // convert the duration in seconds
    auto ms = std::chrono::duration_cast<milliseconds_type>(duration);

    // make a buffer
    buffer_type buffer;
    // render
    buffer << ms.count() << "ms";

    // and return
    return buffer.str();
}


auto
pyre::timers::Movement::
us() const
{
    // read the timer
    auto duration = read();
    // convert the duration in seconds
    auto us = std::chrono::duration_cast<microseconds_type>(duration);

    // make a buffer
    buffer_type buffer;
    // render
    buffer << us.count() << "us";

    // and return
    return buffer.str();
}


// syntactic sugar
pyre::timers::Movement::
operator active_type() const
{
    // return my activation state
    return _active;
}


#endif

// end of file
