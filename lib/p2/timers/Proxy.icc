// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2020 all rights reserved

// code guard
#if !defined(pyre_timers_Proxy_icc)
#error this file contains implementation details for pyre::timers::Proxy
#else


// metamethods
pyre::timers::Proxy::
Proxy(movement_reference movement) :
    // point to actual movement
    _movement {movement}
{}


// accessors
auto
pyre::timers::Proxy::
active() const
{
    // easy enough
    return _movement.active();
}


auto
pyre::timers::Proxy::
mark() const
{
    // easy enough
    return _movement.mark();
}


// interface
// buttons
auto
pyre::timers::Proxy::
start()
{
    // delegate
    return _movement.start();
}


auto
pyre::timers::Proxy::
stop()
{
    // delegate
    return _movement.stop();
}


auto
pyre::timers::Proxy::
reset() -> movement_reference
{
    // delegate
    return _movement.reset();
}


// readout
auto
pyre::timers::Proxy::
read() const
{
    // delegate
    return _movement.read();
}


// displays
auto
pyre::timers::Proxy::
sec() const
{
    // delegate
    return _movement.sec();
}


auto
pyre::timers::Proxy::
ms() const
{
    // delegate
    return _movement.ms();
}


auto
pyre::timers::Proxy::
us() const
{
    // delegate
    return _movement.us();
}


// syntactic sugar
pyre::timers::Proxy::
operator active_type() const
{
    // delegate
    return active_type(_movement);
}


#endif

// end of file
